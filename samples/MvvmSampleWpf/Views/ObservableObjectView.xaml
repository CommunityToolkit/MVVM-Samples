<UserControl x:Class="MvvmSampleWpf.Views.ObservableObjectView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:mdxaml="clr-namespace:MdXaml;assembly=MdXaml" 
             xmlns:controls="clr-namespace:MvvmSampleWpf.Controls" 
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             mc:Ignorable="d" 
             d:DesignHeight="450" 
             d:DesignWidth="800">

    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <b:InvokeCommandAction Command="{Binding LoadDocsCommand}" CommandParameter="ObservableObject"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>

    <StackPanel >
        <mdxaml:MarkdownScrollViewer Markdown="{Binding Texts[ObservableObject]}"/>
        <mdxaml:MarkdownScrollViewer Markdown="{Binding Texts[How it works]}"/>
        <mdxaml:MarkdownScrollViewer Markdown="{Binding Texts[Simple property]}"/>

        <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel>

                        <!--Simple property sample-->
                        <TextBox                            
                            Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock Text="{Binding Name, Mode=OneWay}"/>
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;StackPanel Spacing="8">
    &lt;TextBox
        PlaceholderText="Type here to update the text below"
        Text="{x:Bind ViewModel.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
    &lt;TextBlock Text="{x:Bind ViewModel.Name, Mode=OneWay}"/>
&lt;/StackPanel>
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
private string name;

/// &lt;summary>
/// Gets or sets the name to display.
/// &lt;/summary>
public string Name
{
    get => name;
    set => SetProperty(ref name, value);
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>

        <mdxaml:MarkdownScrollViewer Markdown="{Binding Texts[Wrapping a non-observable model]}"/>
        <mdxaml:MarkdownScrollViewer Markdown="{Binding Texts[Handling `Task&lt;T>` properties]}"/>

        <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel >

                        <!--Async property sample-->
                        <Button
                                Content="Click me to load a Task to await"
                                Command="{Binding ReloadTaskCommand}"/>
                        <TextBlock Text="{Binding MyTask.Status, Mode=OneWay}"/>
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;StackPanel Spacing="8">
    &lt;Button
        Content="Click me to load a Task to await"
        Click="{x:Bind ViewModel.ReloadTask}"/>
    &lt;TextBlock Text="{x:Bind ViewModel.MyTask.Status, Mode=OneWay}"/>
&lt;/StackPanel>
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
private TaskNotifier myTask;

/// &lt;summary>
/// Gets or sets the name to display.
/// &lt;/summary>
public Task MyTask
{
    get => myTask;
    private set => SetPropertyAndNotifyOnCompletion(ref myTask, value);
}

/// &lt;summary>
/// Simulates an asynchronous method.
/// &lt;/summary>
public void ReloadTask()
{
    MyTask = Task.Delay(3000);
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>
    </StackPanel>
</UserControl>
