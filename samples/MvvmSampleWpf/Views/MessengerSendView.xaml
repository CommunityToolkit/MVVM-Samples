<UserControl x:Class="MvvmSampleWpf.Views.MessengerSendView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors" xmlns:controls="clr-namespace:MvvmSampleWpf.Controls" xmlns:mdxaml="clr-namespace:MdXaml;assembly=MdXaml"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <b:InvokeCommandAction Command="{Binding LoadDocsCommand}" CommandParameter="Messenger"/>
            <b:CallMethodAction MethodName="Loaded" TargetObject="{Binding}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
            <b:CallMethodAction MethodName="Unloaded" TargetObject="{Binding}" />
        </b:EventTrigger>
    </b:Interaction.Triggers>

    <ScrollViewer Padding="16">
        <StackPanel Margin="16">
            <mdxaml:MarkdownScrollViewer Markdown="{Binding Texts[Sending and receiving messages]}"/>

            <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel Margin="8" xml:space="default">

                        <!--Sender module-->
                        <Border BorderBrush="#40FFFFFF" BorderThickness="2" CornerRadius="4" Padding="8">
                            <StackPanel Margin="8">
                                <TextBlock Text="{Binding SenderViewModel.Username, Mode=OneWay}"/>
                                <Button
                                    Content="Click to send a message!"
                                    Command="{Binding SenderViewModel.SendUserMessageCommand}"/>
                            </StackPanel>
                        </Border>

                        <!--Receiver module-->
                        <Border BorderBrush="#40FFFFFF" BorderThickness="2" CornerRadius="4" Padding="8">
                            <StackPanel Margin="8">
                                <TextBlock Text="{Binding ReceiverViewModel.Username, Mode=OneWay}"/>
                            </StackPanel>
                        </Border>
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;StackPanel Spacing="8">

    &lt;!--Sender module-->
    &lt;Border BorderBrush="#40FFFFFF" BorderThickness="2" CornerRadius="4" Padding="8">
        &lt;StackPanel Spacing="8">
            &lt;TextBlock Text="{x:Bind ViewModel.SenderViewModel.Username, Mode=OneWay}"/>
            &lt;Button
                Content="Click to send a message!"
                Click="{x:Bind ViewModel.SenderViewModel.SendUserMessage}"/>
        &lt;/StackPanel>
    &lt;/Border>

    &lt;!--Receiver module-->
    &lt;Border BorderBrush="#40FFFFFF" BorderThickness="2" CornerRadius="4" Padding="8">
        &lt;StackPanel Spacing="8">
            &lt;TextBlock Text="{x:Bind ViewModel.ReceiverViewModel.Username, Mode=OneWay}"/>
        &lt;/StackPanel>
    &lt;/Border>
&lt;/StackPanel>
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
public UserSenderViewModel SenderViewModel { get; } = new UserSenderViewModel();

public UserReceiverViewModel ReceiverViewModel { get; } = new UserReceiverViewModel();

// Simple viewmodel for a module sending a username message
public class UserSenderViewModel : ObservableRecipient
{
    private string username = "Bob";

    public string Username
    {
        get => username;
        private set => SetProperty(ref username, value);
    }

    public void SendUserMessage()
    {
        Username = Username == "Bob" ? "Alice" : "Bob";

        Messenger.Send(new UsernameChangedMessage(Username));
    }
}

// Simple viewmodel for a module receiving a username message
public class UserReceiverViewModel : ObservableRecipient
{
    private string username = "";

    public string Username
    {
        get => username;
        private set => SetProperty(ref username, value);
    }

    protected override void OnActivated()
    {
        Messenger.Register&lt;UserReceiverViewModel, UsernameChangedMessage>(this, (r, m) => r.Username = m.Value);
    }
}

// A sample message with a username value
public sealed class UsernameChangedMessage : ValueChangedMessage&lt;string>
{
    public UsernameChangedMessage(string value) : base(value)
    {
    }
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>
        </StackPanel>
    </ScrollViewer>

</UserControl>
