<Page
    x:Class="MvvmSample.Views.RelayCommandPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:MvvmSample.Controls"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:viewModels="using:MvvmSample.ViewModels"
    NavigationCacheMode="Enabled"
    mc:Ignorable="d">
    <Page.DataContext>
        <viewModels:RelayCommandPageViewModel x:Name="ViewModel" />
    </Page.DataContext>
    <interactivity:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Loaded">
            <core:InvokeCommandAction Command="{x:Bind ViewModel.LoadDocsCommand}" CommandParameter="RelayCommand" />
        </core:EventTriggerBehavior>
    </interactivity:Interaction.Behaviors>

    <ScrollViewer Padding="16" CanContentRenderOutsideBounds="True">
        <StackPanel Spacing="16">
            <controls:MarkedControl Foreground="{ThemeResource ApplicationForegroundThemeBrush}" Text="{x:Bind ViewModel.Texts, Mode=OneWay, Converter={StaticResource MarkdownSectionConverter}, ConverterParameter='RelayCommand and RelayCommand&lt;T>'}" />
            <!--<toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('RelayCommand and RelayCommand&lt;T>'), Mode=OneWay}"/>-->
            <controls:MarkedControl Foreground="{ThemeResource ApplicationForegroundThemeBrush}" Text="{x:Bind ViewModel.Texts, Mode=OneWay, Converter={StaticResource MarkdownSectionConverter}, ConverterParameter='How they work'}" />
            <!--<toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('How they work'), Mode=OneWay}"/>-->
            <controls:MarkedControl Foreground="{ThemeResource ApplicationForegroundThemeBrush}" Text="{x:Bind ViewModel.Texts, Mode=OneWay, Converter={StaticResource MarkdownSectionConverter}, ConverterParameter='Working with `ICommand`'}" />
            <!--<toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('Working with `ICommand`'), Mode=OneWay}"/>-->

            <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel Spacing="8">
                        <TextBlock Text="{x:Bind ViewModel.Counter, Mode=OneWay}" />
                        <Button Command="{x:Bind ViewModel.IncrementCounterCommand}" Content="Click me!" />
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;Page
    x:Class=&quot;MyApp.Views.MyPage&quot;
    xmlns:viewModels=&quot;[viewModels]using:MyApp.ViewModels&quot;&gt;
    &lt;Page.DataContext&gt;
        &lt;viewModels:MyViewModel x:Name=&quot;ViewModel&quot;/&gt;
    &lt;/Page.DataContext&gt;

    &lt;StackPanel Spacing=&quot;8&quot;&gt;
        &lt;TextBlock Text=&quot;{x:Bind ViewModel.Counter, Mode=OneWay}&quot;/&gt;
        &lt;Button
            Content=&quot;Click me!&quot;
            Command=&quot;{x:Bind ViewModel.IncrementCounterCommand}&quot;/&gt;
    &lt;/StackPanel&gt;
&lt;/Page&gt;
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
public class MyViewModel : ObservableObject
{
    public MyViewModel()
    {
        IncrementCounterCommand = new RelayCommand(IncrementCounter);
    }

    /// &lt;summary&gt;
    /// Gets the &lt;see cref=&quot;ICommand&quot;/&gt; responsible for incrementing &lt;see cref=&quot;Counter&quot;/&gt;.
    /// &lt;/summary&gt;
    public ICommand IncrementCounterCommand { get; }

    private int counter;

    /// &lt;summary&gt;
    /// Gets the current value of the counter.
    /// &lt;/summary&gt;
    public int Counter
    {
        get =&gt; counter;
        private set =&gt; SetProperty(ref counter, value);
    }

    /// &lt;summary&gt;
    /// Increments &lt;see cref=&quot;Counter&quot;/&gt;.
    /// &lt;/summary&gt;
    private void IncrementCounter() =&gt; Counter++;
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>
        </StackPanel>
    </ScrollViewer>
</Page>
