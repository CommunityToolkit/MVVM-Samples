<Page
    x:Class="MvvmSample.Views.MessengerSendPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:MvvmSample.Controls"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:viewModels="using:MvvmSample.ViewModels"
    NavigationCacheMode="Enabled"
    mc:Ignorable="d">
    <Page.DataContext>
        <viewModels:MessengerPageViewModel x:Name="ViewModel" />
    </Page.DataContext>
    <interactivity:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Loaded">
            <core:InvokeCommandAction Command="{x:Bind ViewModel.LoadDocsCommand}" CommandParameter="Messenger" />
        </core:EventTriggerBehavior>
    </interactivity:Interaction.Behaviors>

    <ScrollViewer Padding="16" CanContentRenderOutsideBounds="True">
        <StackPanel Spacing="16">
            <controls:MarkedControl Foreground="{ThemeResource ApplicationForegroundThemeBrush}" Text="{x:Bind ViewModel.Texts, Mode=OneWay, Converter={StaticResource MarkdownSectionConverter}, ConverterParameter='Sending and receiving messages'}" />
            <!--<toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('Sending and receiving messages'), Mode=OneWay}"/>-->

            <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel xml:space="default" Spacing="8">

                        <!--  Sender module  -->
                        <Border
                            Padding="8"
                            BorderBrush="#40FFFFFF"
                            BorderThickness="2"
                            CornerRadius="4">
                            <StackPanel Spacing="8">
                                <TextBlock Text="{x:Bind ViewModel.SenderViewModel.Username, Mode=OneWay}" />
                                <!--<Button Content="Click to send a message!"
                                        Click="{x:Bind ViewModel.SenderViewModel.SendUserMessage}" />-->
                                <Button Click="SendUserMessage_Click" Content="Click to send a message!" />
                            </StackPanel>
                        </Border>

                        <!--  Receiver module  -->
                        <Border
                            Padding="8"
                            BorderBrush="#40FFFFFF"
                            BorderThickness="2"
                            CornerRadius="4">
                            <StackPanel Spacing="8">
                                <TextBlock Text="{x:Bind ViewModel.ReceiverViewModel.Username, Mode=OneWay}" />
                            </StackPanel>
                        </Border>
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;StackPanel Spacing=&quot;8&quot;&gt;

    &lt;!--Sender module--&gt;
    &lt;Border BorderBrush=&quot;#40FFFFFF&quot; BorderThickness=&quot;2&quot; CornerRadius=&quot;4&quot; Padding=&quot;8&quot;&gt;
        &lt;StackPanel Spacing=&quot;8&quot;&gt;
            &lt;TextBlock Text=&quot;{x:Bind ViewModel.SenderViewModel.Username, Mode=OneWay}&quot;/&gt;
            &lt;Button
                Content=&quot;Click to send a message!&quot;
                Click=&quot;{x:Bind ViewModel.SenderViewModel.SendUserMessage}&quot;/&gt;
        &lt;/StackPanel&gt;
    &lt;/Border&gt;

    &lt;!--Receiver module--&gt;
    &lt;Border BorderBrush=&quot;#40FFFFFF&quot; BorderThickness=&quot;2&quot; CornerRadius=&quot;4&quot; Padding=&quot;8&quot;&gt;
        &lt;StackPanel Spacing=&quot;8&quot;&gt;
            &lt;TextBlock Text=&quot;{x:Bind ViewModel.ReceiverViewModel.Username, Mode=OneWay}&quot;/&gt;
        &lt;/StackPanel&gt;
    &lt;/Border&gt;
&lt;/StackPanel&gt;
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
public UserSenderViewModel SenderViewModel { get; } = new UserSenderViewModel();

public UserReceiverViewModel ReceiverViewModel { get; } = new UserReceiverViewModel();

// Simple viewmodel for a module sending a username message
public class UserSenderViewModel : ObservableRecipient
{
    private string username = &quot;Bob&quot;;

    public string Username
    {
        get =&gt; username;
        private set =&gt; SetProperty(ref username, value);
    }

    public void SendUserMessage()
    {
        Username = Username == &quot;Bob&quot; ? &quot;Alice&quot; : &quot;Bob&quot;;

        Messenger.Send(new UsernameChangedMessage(Username));
    }
}

// Simple viewmodel for a module receiving a username message
public class UserReceiverViewModel : ObservableRecipient
{
    private string username = &quot;&quot;;

    public string Username
    {
        get =&gt; username;
        private set =&gt; SetProperty(ref username, value);
    }

    protected override void OnActivated()
    {
        Messenger.Register&lt;UsernameChangedMessage&gt;(this, m =&gt; Username = m.Value);
    }
}

// A sample message with a username value
public sealed class UsernameChangedMessage : ValueChangedMessage&lt;string&gt;
{
    public UsernameChangedMessage(string value) : base(value)
    {
    }
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>
        </StackPanel>
    </ScrollViewer>
</Page>
