<Page
    x:Class="MvvmSampleUwp.Views.ObservableObjectPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:controls="using:MvvmSampleUwp.Controls"
    xmlns:viewModels="using:MvvmSampleUwp.ViewModels"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    mc:Ignorable="d"
    NavigationCacheMode="Enabled">
    <Page.DataContext>
        <viewModels:ObservableObjectPageViewModel x:Name="ViewModel"/>
    </Page.DataContext>
    <interactivity:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Loaded">
            <core:InvokeCommandAction Command="{x:Bind ViewModel.LoadDocsCommand}" CommandParameter="ObservableObject"/>
        </core:EventTriggerBehavior>
    </interactivity:Interaction.Behaviors>

    <ScrollViewer Padding="16" CanContentRenderOutsideBounds="True">
        <StackPanel Spacing="16">
            <toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('ObservableObject'), Mode=OneWay}"/>
            <toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('How it works'), Mode=OneWay}"/>
            <toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('Simple property'), Mode=OneWay}"/>

            <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel Spacing="8">

                        <!--Simple property sample-->
                        <TextBox
                            PlaceholderText="Type here to update the text below"
                            Text="{x:Bind ViewModel.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock Text="{x:Bind ViewModel.Name, Mode=OneWay}"/>
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;StackPanel Spacing="8">
    &lt;TextBox
        PlaceholderText="Type here to update the text below"
        Text="{x:Bind ViewModel.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
    &lt;TextBlock Text="{x:Bind ViewModel.Name, Mode=OneWay}"/>
&lt;/StackPanel>
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
private string name;

/// &lt;summary>
/// Gets or sets the name to display.
/// &lt;/summary>
public string Name
{
    get => name;
    set => SetProperty(ref name, value);
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>

            <toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('Wrapping a non-observable model'), Mode=OneWay}"/>
            <toolkit:MarkdownTextBlock Text="{x:Bind ViewModel.GetParagraph('Handling `Task&lt;T>` properties'), Mode=OneWay}"/>

            <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel Spacing="8">

                        <!--Async property sample-->
                        <Button
                                Content="Click me to load a Task to await"
                                Click="{x:Bind ViewModel.ReloadTask}"/>
                        <TextBlock Text="{x:Bind ViewModel.MyTask.Status, Mode=OneWay}"/>
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;StackPanel Spacing="8">
    &lt;Button
        Content="Click me to load a Task to await"
        Click="{x:Bind ViewModel.ReloadTask}"/>
    &lt;TextBlock Text="{x:Bind ViewModel.MyTask.Status, Mode=OneWay}"/>
&lt;/StackPanel>
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
private Task myTask;

/// &lt;summary>
/// Gets or sets the name to display.
/// &lt;/summary>
public Task MyTask
{
    get => myTask;
    private set => SetPropertyAndNotifyOnCompletion(ref myTask, () => myTask, value);
}

/// &lt;summary>
/// Simulates an asynchronous method.
/// &lt;/summary>
public void ReloadTask()
{
    MyTask = Task.Delay(3000);
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>
        </StackPanel>
    </ScrollViewer>
</Page>
