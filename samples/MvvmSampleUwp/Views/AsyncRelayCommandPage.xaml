<Page
    x:Class="MvvmSampleUwp.Views.AsyncRelayCommandPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:MvvmSampleUwp.Controls"
    xmlns:converters="using:Microsoft.Toolkit.Uwp.UI.Converters"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    xmlns:viewModels="using:MvvmSample.Core.ViewModels"
    NavigationCacheMode="Enabled"
    mc:Ignorable="d">
    <Page.DataContext>
        <viewModels:AsyncRelayCommandPageViewModel x:Name="ViewModel" />
    </Page.DataContext>
    <interactivity:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Loaded">
            <core:InvokeCommandAction Command="{x:Bind ViewModel.LoadDocsCommand}" CommandParameter="AsyncRelayCommand" />
        </core:EventTriggerBehavior>
    </interactivity:Interaction.Behaviors>
    <Page.Resources>
        <converters:TaskResultConverter2 x:Key="TaskResultConverter" />
    </Page.Resources>

    <ScrollViewer Padding="{StaticResource DocumentationPageContentPadding}" CanContentRenderOutsideBounds="True">
        <StackPanel Spacing="16">
            <controls:DocumentationBlock Text="{x:Bind ViewModel.GetParagraph('AsyncRelayCommand and AsyncRelayCommand&lt;T>'), Mode=OneWay}" />
            <controls:DocumentationBlock Text="{x:Bind ViewModel.GetParagraph('How they work'), Mode=OneWay}" />
            <controls:DocumentationBlock Text="{x:Bind ViewModel.GetParagraph('Working with asynchronous commands'), Mode=OneWay}" />

            <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <StackPanel xml:space="default" Spacing="8">
                        <TextBlock>
                            <Run Text="Task status:" />
                            <Run Text="{x:Bind ViewModel.DownloadTextCommand.ExecutionTask.Status, Mode=OneWay}" />
                            <LineBreak />
                            <Run Text="Result:" />
                            <Run Text="{x:Bind ViewModel.DownloadTextCommand.ExecutionTask, Converter={StaticResource TaskResultConverter}, Mode=OneWay}" />
                        </TextBlock>
                        <Button Command="{x:Bind ViewModel.DownloadTextCommand}" Content="Click me!" />
                        <muxc:ProgressRing HorizontalAlignment="Left" IsActive="{x:Bind ViewModel.DownloadTextCommand.IsRunning, Mode=OneWay}" />
                    </StackPanel>
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;Page.Resources&gt;
    &lt;converters:TaskResultConverter x:Key=&quot;TaskResultConverter&quot;/&gt;
&lt;/Page.Resources&gt;
&lt;StackPanel Spacing=&quot;8&quot;&gt;
    &lt;TextBlock&gt;
        &lt;Run Text=&quot;Task status:&quot;/&gt;
        &lt;Run Text=&quot;{x:Bind ViewModel.DownloadTextCommand.ExecutionTask.Status, Mode=OneWay}&quot;/&gt;
        &lt;LineBreak/&gt;
        &lt;Run Text=&quot;Result:&quot;/&gt;
        &lt;Run Text=&quot;{x:Bind ViewModel.DownloadTextCommand.ExecutionTask, Converter={StaticResource TaskResultConverter}, Mode=OneWay}&quot;/&gt;
    &lt;/TextBlock&gt;
    &lt;Button
        Content=&quot;Click me!&quot;
        Command=&quot;{x:Bind ViewModel.DownloadTextCommand}&quot;/&gt;
    &lt;muxc:ProgressRing
        HorizontalAlignment=&quot;Left&quot;
        IsActive=&quot;{x:Bind ViewModel.DownloadTextCommand.IsRunning, Mode=OneWay}&quot;/&gt;
&lt;/StackPanel&gt;
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
public MyViewModel()
{
    DownloadTextCommand = new AsyncRelayCommand(DownloadTextAsync);
}

public IAsyncRelayCommand DownloadTextCommand { get; }

private async Task&lt;string&gt; DownloadTextAsync()
{
    await Task.Delay(3000); // Simulate a web request

    return &quot;Hello world!&quot;;
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>
        </StackPanel>
    </ScrollViewer>
</Page>
