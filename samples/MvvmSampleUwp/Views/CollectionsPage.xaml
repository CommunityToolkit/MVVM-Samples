<Page
    x:Class="MvvmSampleUwp.Views.CollectionsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:MvvmSampleUwp.Controls"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:widgets="using:MvvmSampleUwp.Views.Widgets"
    NavigationCacheMode="Enabled"
    mc:Ignorable="d">
    <interactivity:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Loaded">
            <core:InvokeCommandAction Command="{x:Bind ViewModel.LoadDocsCommand}" CommandParameter="ObservableGroupedCollections" />
        </core:EventTriggerBehavior>
    </interactivity:Interaction.Behaviors>

    <ScrollViewer Padding="{StaticResource DocumentationPageContentPadding}" CanContentRenderOutsideBounds="True">
        <StackPanel Spacing="16">
            <controls:DocumentationBlock Text="{x:Bind ViewModel.GetParagraph('ObservableGroup&lt;TKey, TElement> and ReadOnlyObservableGroup&lt;TKey, TElement>'), Mode=OneWay}" />

            <controls:InteractiveSample xml:space="preserve">
                <controls:InteractiveSample.Content>
                    <widgets:ContactsListWidget />
                </controls:InteractiveSample.Content>
                <controls:InteractiveSample.XamlCode>
&lt;Grid Height=&quot;480&quot;&gt;
    &lt;Grid.Resources&gt;

        &lt;!--  Shared menu flyout for all contacts  --&gt;
        &lt;MenuFlyout x:Key=&quot;ContactMenuFlyout&quot;&gt;
            &lt;MenuFlyoutItem
                Command=&quot;{x:Bind ViewModel.DeleteContactCommand}&quot;
                CommandParameter=&quot;{Binding}&quot;
                Text=&quot;Remove contact&quot;&gt;
                &lt;MenuFlyoutItem.Icon&gt;
                    &lt;SymbolIcon Symbol=&quot;Delete&quot; /&gt;
                &lt;/MenuFlyoutItem.Icon&gt;
            &lt;/MenuFlyoutItem&gt;
        &lt;/MenuFlyout&gt;

        &lt;!--  SemanticZoom grouped sourc  --&gt;
        &lt;CollectionViewSource
            x:Name=&quot;PeopleViewSource&quot;
            IsSourceGrouped=&quot;True&quot;
            Source=&quot;{x:Bind ViewModel.Contacts, Mode=OneWay}&quot; /&gt;

        &lt;!--  Contact template  --&gt;
        &lt;DataTemplate x:Key=&quot;PersonListViewTemplate&quot; x:DataType=&quot;contacts:Contact&quot;&gt;
            &lt;Grid ContextFlyout=&quot;{StaticResource ContactMenuFlyout}&quot;&gt;
                &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height=&quot;*&quot; /&gt;
                    &lt;RowDefinition Height=&quot;*&quot; /&gt;
                &lt;/Grid.RowDefinitions&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width=&quot;Auto&quot; /&gt;
                    &lt;ColumnDefinition Width=&quot;*&quot; /&gt;
                &lt;/Grid.ColumnDefinitions&gt;
                &lt;Ellipse
                    x:Name=&quot;Ellipse&quot;
                    Grid.RowSpan=&quot;2&quot;
                    Width=&quot;32&quot;
                    Height=&quot;32&quot;
                    Margin=&quot;6&quot;
                    HorizontalAlignment=&quot;Center&quot;
                    VerticalAlignment=&quot;Center&quot;&gt;
                    &lt;Ellipse.Fill&gt;
                        &lt;ImageBrush ImageSource=&quot;{x:Bind Picture.Url}&quot; /&gt;
                    &lt;/Ellipse.Fill&gt;
                &lt;/Ellipse&gt;
                &lt;TextBlock
                    Grid.Column=&quot;1&quot;
                    Margin=&quot;12,6,0,0&quot;
                    x:Phase=&quot;1&quot;
                    Style=&quot;{ThemeResource BaseTextBlockStyle}&quot;
                    Text=&quot;{x:Bind Name}&quot; /&gt;
                &lt;TextBlock
                    Grid.Row=&quot;1&quot;
                    Grid.Column=&quot;1&quot;
                    Margin=&quot;12,0,0,6&quot;
                    x:Phase=&quot;2&quot;
                    Style=&quot;{ThemeResource BodyTextBlockStyle}&quot;
                    Text=&quot;{x:Bind Email}&quot; /&gt;
            &lt;/Grid&gt;
        &lt;/DataTemplate&gt;
    &lt;/Grid.Resources&gt;

    &lt;!--  Loading bar  --&gt;
    &lt;muxc:ProgressBar
        HorizontalAlignment=&quot;Stretch&quot;
        VerticalAlignment=&quot;Top&quot;
        Background=&quot;Transparent&quot;
        IsIndeterminate=&quot;{x:Bind ViewModel.LoadContactsCommand.IsRunning, Mode=OneWay}&quot; /&gt;

    &lt;!--  Contacts view  --&gt;
    &lt;SemanticZoom&gt;
        &lt;SemanticZoom.ZoomedInView&gt;
            &lt;ListView
                ItemTemplate=&quot;{StaticResource PersonListViewTemplate}&quot;
                ItemsSource=&quot;{x:Bind PeopleViewSource.View, Mode=OneWay}&quot;
                SelectionMode=&quot;Single&quot;&gt;
                &lt;ListView.GroupStyle&gt;
                    &lt;GroupStyle HidesIfEmpty=&quot;True&quot;&gt;
                        &lt;GroupStyle.HeaderTemplate&gt;
                            &lt;DataTemplate x:DataType=&quot;collections:IReadOnlyObservableGroup&quot;&gt;
                                &lt;TextBlock
                                    FontSize=&quot;24&quot;
                                    Foreground=&quot;{ThemeResource SystemControlHighlightAccentBrush}&quot;
                                    Text=&quot;{x:Bind Key}&quot; /&gt;
                            &lt;/DataTemplate&gt;
                        &lt;/GroupStyle.HeaderTemplate&gt;
                    &lt;/GroupStyle&gt;
                &lt;/ListView.GroupStyle&gt;
            &lt;/ListView&gt;
        &lt;/SemanticZoom.ZoomedInView&gt;
        &lt;SemanticZoom.ZoomedOutView&gt;
            &lt;GridView
                HorizontalAlignment=&quot;Stretch&quot;
                ItemsSource=&quot;{x:Bind PeopleViewSource.View.CollectionGroups, Mode=OneWay}&quot;
                SelectionMode=&quot;Single&quot;&gt;
                &lt;GridView.ItemTemplate&gt;
                    &lt;DataTemplate x:DataType=&quot;ICollectionViewGroup&quot;&gt;
                        &lt;Border Width=&quot;80&quot; Height=&quot;80&quot;&gt;
                            &lt;TextBlock
                                HorizontalAlignment=&quot;Center&quot;
                                VerticalAlignment=&quot;Center&quot;
                                FontSize=&quot;32&quot;
                                Foreground=&quot;{ThemeResource SystemControlHighlightAccentBrush}&quot;
                                Text=&quot;{x:Bind Group.(collections:IReadOnlyObservableGroup.Key)}&quot; /&gt;
                        &lt;/Border&gt;
                    &lt;/DataTemplate&gt;
                &lt;/GridView.ItemTemplate&gt;
            &lt;/GridView&gt;
        &lt;/SemanticZoom.ZoomedOutView&gt;
    &lt;/SemanticZoom&gt;
&lt;/Grid&gt;
                </controls:InteractiveSample.XamlCode>
                <controls:InteractiveSample.CSharpCode>
/// &lt;summary&gt;
/// A viewmodel for a contacts list widget.
/// &lt;/summary&gt;
public partial class ContactsListWidgetViewModel : ObservableObject
{
    /// &lt;summary&gt;
    /// The &lt;see cref="IContactsService"/&gt; instance currently in use.
    /// &lt;/summary&gt;
    private readonly IContactsService ContactsService;

    public ContactsListWidgetViewModel(IContactsService contactsService)
    {
        ContactsService = contactsService;
    }

    /// &lt;summary&gt;
    /// Gets the current collection of contacts
    /// &lt;/summary&gt;
    public ObservableGroupedCollection&lt;string, Contact&gt; Contacts { get; private set; } = new();

    /// &lt;summary&gt;
    /// Loads the contacts to display.
    /// &lt;/summary&gt;
    [RelayCommand(FlowExceptionsToTaskScheduler = true)]
    private async Task LoadContactsAsync()
    {
        ContactsQueryResponse contacts = await ContactsService.GetContactsAsync(50);

        Contacts = new ObservableGroupedCollection&lt;string, Contact&gt;(
            contacts.Contacts
            .GroupBy(static c =&gt; char.ToUpperInvariant(c.Name.First[0]).ToString())
            .OrderBy(static g =&gt; g.Key));

        OnPropertyChanged(nameof(Contacts));
    }

    /// &lt;summary&gt;
    /// Loads more contacts.
    /// &lt;/summary&gt;
    [RelayCommand(FlowExceptionsToTaskScheduler = true)]
    private async Task LoadMoreContactsAsync()
    {
        ContactsQueryResponse contacts = await ContactsService.GetContactsAsync(10);

        foreach (Contact contact in contacts.Contacts)
        {
            string key = char.ToUpperInvariant(contact.Name.First[0]).ToString();

            Contacts.InsertItem(
                key: key,
                keyComparer: Comparer&lt;string&gt;.Default,
                item: contact,
                itemComparer: Comparer&lt;Contact&gt;.Create(static (left, right) =&gt; Comparer&lt;string&gt;.Default.Compare(left.ToString(), right.ToString())));
        }
    }

    /// &lt;summary&gt;
    /// Removes a given contact from the list.
    /// &lt;/summary&gt;
    /// &lt;param name="contact"&gt;The contact to remove.&lt;/param&gt;
    [RelayCommand]
    private void DeleteContact(Contact contact)
    {
        Contacts.FirstGroupByKey(char.ToUpperInvariant(contact.Name.First[0]).ToString()).Remove(contact);
    }
}
                </controls:InteractiveSample.CSharpCode>
            </controls:InteractiveSample>

            <controls:DocumentationBlock Text="{x:Bind ViewModel.GetParagraph('ObservableGroup&lt;TKey, TElement> features'), Mode=OneWay}" />
            <controls:DocumentationBlock Text="{x:Bind ViewModel.GetParagraph('ObservableGroupedCollection&lt;TKey, TElement> and ReadOnlyObservableGroupedCollection&lt;TKey, TElement>'), Mode=OneWay}" />
            <controls:DocumentationBlock Text="{x:Bind ViewModel.GetParagraph('ObservableGroupedCollection&lt;TKey, TElement> features'), Mode=OneWay}" />
        </StackPanel>
    </ScrollViewer>
</Page>
