<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
			 xmlns:vm="clr-namespace:MvvmSample.Core.ViewModels;assembly=MvvmSample.Core"
			 xmlns:md="clr-namespace:Xam.Forms.Markdown;assembly=Xam.Forms.MarkdownView"
			 xmlns:controls="clr-namespace:MvvmSampleXF.Controls"
			 xmlns:mvvmSampleXf="clr-namespace:MvvmSampleXF;assembly=MvvmSampleXF"
			 x:Class="MvvmSampleXF.Views.ObservableObjectPage"
			 x:DataType="vm:ObservableObjectPageViewModel"
			 Title="ObservableObject"
             mvvmSampleXf:ViewModelLocator.InitViewModel="True">
	<ScrollView Padding="16">
		<StackLayout Padding="16">
			<md:MarkdownView Markdown="{Binding Path=Texts[ObservableObject], Mode=OneWay}" />
			<md:MarkdownView Markdown="{Binding Path=Texts[How it works], Mode=OneWay}" />
			<md:MarkdownView Markdown="{Binding Path=Texts[Simple property], Mode=OneWay}" />

			<controls:InteractiveSample ControlTemplate="{StaticResource InteractiveSampleTemplate}"
										HeightRequest="300">
				<StackLayout Spacing="8">
					<!--Simple property sample-->
					<Entry Placeholder="Type here to update the text below"
						   Text="{Binding Name, Mode=TwoWay}" />
					<Label Text="{Binding Name, Mode=OneWay}" />
				</StackLayout>
				<controls:InteractiveSample.XamlCode>
```xml
&lt;StackLayout Spacing="8">
    &lt;!--Simple property sample-->
    &lt;Entry Placeholder="Type here to update the text below"
            Text="{Binding Name, Mode=TwoWay}" />
    &lt;Label Text="{Binding Name, Mode=OneWay}" />
&lt;/StackLayout>

```
				</controls:InteractiveSample.XamlCode>
				<controls:InteractiveSample.CSharpCode>
```csharp
private string name;

/// &lt;summary>
/// Gets or sets the name to display.
/// &lt;/summary>
public string Name
{
    get => name;
    set => SetProperty(ref name, value);
}

```
				</controls:InteractiveSample.CSharpCode>
			</controls:InteractiveSample>
			
			

			<md:MarkdownView Markdown="{Binding Path=Texts[Wrapping a non-observable model], Mode=OneWay}" />
			<md:MarkdownView Markdown="{Binding Path=Texts[Handling `Task&lt;T>` properties], Mode=OneWay}" />

			<controls:InteractiveSample ControlTemplate="{StaticResource InteractiveSampleTemplate}"
										HeightRequest="400">
				<StackLayout Spacing="8">
					<Button Text="Click me to load a Task to await"
							Command="{Binding ReloadTaskCommand}" />
					<Label Text="{Binding MyTask.Status, Mode=OneWay}" />
				</StackLayout>
				<controls:InteractiveSample.XamlCode>
					```xml
&lt;StackLayout Spacing="8">
    &lt;Button Text="Click me to load a Task to await"
            Command="{Binding ReloadTaskCommand}" />
    &lt;Label Text="{Binding MyTask.Status, Mode=OneWay}" />
&lt;/StackLayout>

```
				</controls:InteractiveSample.XamlCode>
				<controls:InteractiveSample.CSharpCode>
					```csharp
public ObservableObjectPageViewModel()
{
    ReloadTaskCommand = new RelayCommand(ReloadTask);
}
					
public ICommand ReloadTaskCommand { get; }

private string name;

public string Name
{
    get => name;
    set => SetProperty(ref name, value);
}

private TaskNotifier myTask;

public Task MyTask
{
    get => myTask;
    private set => SetPropertyAndNotifyOnCompletion(ref myTask, value);
}

public void ReloadTask()
{
    MyTask = Task.Delay(3000);
}

```
				</controls:InteractiveSample.CSharpCode>
			</controls:InteractiveSample>
		</StackLayout>
	</ScrollView>
</ContentPage>